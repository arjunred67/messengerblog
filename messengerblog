import { useState, useRef, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export default function MessengerBlog() {
  const [posts, setPosts] = useState([]);
  const [message, setMessage] = useState("");
  const [isCalling, setIsCalling] = useState(false);
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const peerConnection = useRef(null);

  useEffect(() => {
    if (isCalling) {
      startWebRTC();
    }
  }, [isCalling]);

  const addPost = () => {
    if (message.trim() !== "") {
      setPosts([{ id: Date.now(), content: message }, ...posts]);
      setMessage("");
    }
  };

  const startCall = () => {
    setIsCalling(true);
  };

  const endCall = () => {
    setIsCalling(false);
    if (peerConnection.current) {
      peerConnection.current.close();
      peerConnection.current = null;
    }
  };

  const startWebRTC = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideoRef.current.srcObject = stream;

      peerConnection.current = new RTCPeerConnection();
      stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));

      peerConnection.current.ontrack = (event) => {
        remoteVideoRef.current.srcObject = event.streams[0];
      };
    } catch (error) {
      console.error("Error accessing media devices:", error);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 space-y-4 bg-black text-white rounded-lg shadow-lg min-h-screen">
      <h1 className="text-3xl font-bold text-gray-200 text-center">Messenger Blog</h1>
      <div className="flex gap-2 bg-gray-900 p-3 rounded-lg">
        <Input 
          value={message} 
          onChange={(e) => setMessage(e.target.value)} 
          placeholder="Write a message..." 
          className="flex-1 bg-gray-800 text-white border border-gray-700 rounded-lg p-2"
        />
        <Button onClick={addPost} className="bg-blue-600 hover:bg-blue-500 text-white px-4 py-2 rounded-lg">Post</Button>
      </div>
      <div className="space-y-3">
        {posts.map((post) => (
          <Card key={post.id} className="p-3 border border-gray-700 rounded-lg bg-gray-900 shadow-md">
            <CardContent className="text-gray-300">{post.content}</CardContent>
          </Card>
        ))}
      </div>
      <div className="flex justify-center mt-4">
        {isCalling ? (
          <Button onClick={endCall} className="bg-red-600 hover:bg-red-500 text-white px-4 py-2 rounded-lg">End Call</Button>
        ) : (
          <Button onClick={startCall} className="bg-green-600 hover:bg-green-500 text-white px-4 py-2 rounded-lg">Start Call</Button>
        )}
      </div>
      {isCalling && (
        <div className="mt-4 flex flex-col items-center">
          <video ref={localVideoRef} autoPlay playsInline className="w-64 h-48 border border-gray-700 rounded-lg" />
          <video ref={remoteVideoRef} autoPlay playsInline className="w-64 h-48 border border-gray-700 rounded-lg mt-2" />
        </div>
      )}
    </div>
  );
}

